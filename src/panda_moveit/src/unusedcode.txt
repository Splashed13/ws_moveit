void openGripper(trajectory_msgs::JointTrajectory& posture)
    {
        /* Add both finger joints of panda robot. */
        posture.joint_names.resize(2);
        posture.joint_names[0] = "panda_finger_joint1";
        posture.joint_names[1] = "panda_finger_joint2";

        /* Set them as open, wide enough for the object to fit. */
        posture.points.resize(1);
        posture.points[0].positions.resize(2);
        posture.points[0].positions[0] = OPEN_GRIPPER[0];
        posture.points[0].positions[1] = OPEN_GRIPPER[1];
        posture.points[0].time_from_start = ros::Duration(0.5);
    }

    void closedGripper(trajectory_msgs::JointTrajectory& posture)
    {
        /* Add both finger joints of panda robot. */
        posture.joint_names.resize(2);
        posture.joint_names[0] = "panda_finger_joint1";
        posture.joint_names[1] = "panda_finger_joint2";

        /* Set them as closed. */
        posture.points.resize(1);
        posture.points[0].positions.resize(2);
        posture.points[0].positions[0] = CLOSE_GRIPPER[0];
        posture.points[0].positions[1] = CLOSE_GRIPPER[1];
        posture.points[0].time_from_start = ros::Duration(0.5);
    }

    void PickandPlace::pick(geometry_msgs::Pose pose_target){
        // Create a vector of grasps to be attempted, currently only creating single grasp.
        // This is essentially useful when using a grasp generator to generate and test multiple grasps.
        std::vector<moveit_msgs::Grasp> grasps;
        grasps.resize(1);

        // Setting grasp pose
        grasps[0].grasp_pose.header.frame_id = "panda_link0";
        grasps[0].grasp_pose.pose = pose_target;

        // pre-grasp approach
        grasps[0].pre_grasp_approach.direction.header.frame_id = "panda_link8";
        grasps[0].pre_grasp_approach.direction.vector.z = -1.0;
        grasps[0].pre_grasp_approach.min_distance = 0.095;
        grasps[0].pre_grasp_approach.desired_distance = 0.115;

        // post-grasp retreat
        grasps[0].post_grasp_retreat.direction.header.frame_id = "panda_link0";
        /* Direction is set as positive z axis */
        grasps[0].post_grasp_retreat.direction.vector.z = 1.0;
        grasps[0].post_grasp_retreat.min_distance = 0.1;
        grasps[0].post_grasp_retreat.desired_distance = 0.25;

    }



